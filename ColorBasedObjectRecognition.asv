% Clear console and variables
clc;
clear;
close all;

% Load an image
image = imread('your_image.jpeg'); % Replace with your image file

% Step 1: Convert the image from RGB to HSV color space
hsvImage = rgb2hsv(image);

% Step 2: Apply color thresholding to segment objects
% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.0; % Minimum hue value
channel1Max = 0.1; % Maximum hue value

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.5; % Minimum saturation value
channel2Max = 1.0; % Maximum saturation value

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.5; % Minimum value
channel3Max = 1.0; % Maximum value

% Create mask based on chosen histogram thresholds
binaryMask = (hsvImage(:,:,1) >= channel1Min ) & (hsvImage(:,:,1) <= channel1Max) & ...
             (hsvImage(:,:,2) >= channel2Min ) & (hsvImage(:,:,2) <= channel2Max) & ...
             (hsvImage(:,:,3) >= channel3Min ) & (hsvImage(:,:,3) <= channel3Max);

% Step 3: Use morphological operations to refine the segmentation
% Fill holes in the binary mask
binaryMask = imfill(binaryMask, 'holes');

% Remove small objects from the binary mask
binaryMask = bwareaopen(binaryMask, 100);

% Step 4: Display and label the segmented objects
% Label connected components
labeledImage = bwlabel(binaryMask);
stats = regionprops(labeledImage, 'BoundingBox', 'Centroid');

% Create a figure to display results
figure;
imshow(image);
title('Original Image');
hold on;

% Display bounding boxes and centroids
for k = 1:length(stats)
    % Get the bounding box
    bbox = stats(k).BoundingBox;
    % Draw the bounding box
    rectangle('Position', bbox, 'EdgeColor', 'r', 'LineWidth', 2);
    
    % Get the centroid
    centroid = stats(k).Centroid;
    % Display the centroid
    plot(centroid(1), centroid(2), 'b*');
    
    % Label the object
    text(centroid(1) - 10, centroid(2) - 10, sprintf('Object %d', k), 'Color', 'yellow', 'FontSize', 12, 'FontWeight', 'bold');
end

hold off;
